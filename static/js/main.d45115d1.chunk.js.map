{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["AlignButtons","commands","useCommands","gatheredNodes","state","included","doc","nodesBetween","selection","from","to","node","includes","type","name","push","gatherNodes","useEditorState","useRemirrorContext","manager","store","nodeTags","formattingNode","length","onMouseDown","event","preventDefault","onClick","leftAlign","style","fontWeight","attrs","nodeTextAlignment","centerAlign","rightAlign","IndentButtons","decreaseIndent","increaseIndent","LineHeightButtons","setLineHeight","Editor","useRemirror","extensions","NodeFormattingExtension","content","stringHandler","htmlToProsemirrorNode","onChange","autoFocus","initialContent","autoRender","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QA+BA,IAAMA,EAAe,WACnB,IAAMC,EAAWC,cAIXC,EArBR,SACEC,EACAC,GAEA,IAAMF,EAAmC,GASzC,OANAC,EAAME,IAAIC,aAAaH,EAAMI,UAAUC,KAAML,EAAMI,UAAUE,IAAI,SAACC,GAC5DN,EAASO,SAASD,EAAKE,KAAKC,OAC9BX,EAAcY,KAAKJ,MAIhBR,EAQea,CAHRC,cACMC,cAAZC,QAIEC,MAAMC,SAASC,gBAEnBX,EAAOR,EAAcA,EAAcoB,OAAS,GAElD,OACE,qCACE,wBACEC,YAAa,SAACC,GAAD,OAAWA,EAAMC,kBAC9BC,QAAS,kBAAM1B,EAAS2B,aACxBC,MAAO,CACLC,WACoC,UAA9B,OAAJnB,QAAI,IAAJA,OAAA,EAAAA,EAAMoB,MAAMC,mBAA+B,OAAS,UAL1D,kBAUA,wBACER,YAAa,SAACC,GAAD,OAAWA,EAAMC,kBAC9BC,QAAS,kBAAM1B,EAASgC,eACxBJ,MAAO,CACLC,WACoC,YAA9B,OAAJnB,QAAI,IAAJA,OAAA,EAAAA,EAAMoB,MAAMC,mBAAiC,OAAS,UAL5D,oBAUA,wBACER,YAAa,SAACC,GAAD,OAAWA,EAAMC,kBAC9BC,QAAS,kBAAM1B,EAASiC,cACxBL,MAAO,CACLC,WACoC,WAA9B,OAAJnB,QAAI,IAAJA,OAAA,EAAAA,EAAMoB,MAAMC,mBAAgC,OAAS,UAL3D,uBAcAG,EAAgB,WACpB,IAAMlC,EAAWC,cACjB,OACE,qCACE,wBACEsB,YAAa,SAACC,GAAD,OAAWA,EAAMC,kBAC9BC,QAAS,kBAAM1B,EAASmC,kBAF1B,gBAMA,wBACEZ,YAAa,SAACC,GAAD,OAAWA,EAAMC,kBAC9BC,QAAS,kBAAM1B,EAASoC,kBAF1B,oBAUAC,EAAoB,WACxB,IAAMrC,EAAWC,cACjB,OACE,qCACE,wBACEsB,YAAa,SAACC,GAAD,OAAWA,EAAMC,kBAC9BC,QAAS,kBAAM1B,EAASsC,cAAc,IAFxC,oBAMA,wBACEf,YAAa,SAACC,GAAD,OAAWA,EAAMC,kBAC9BC,QAAS,kBAAM1B,EAASsC,cAAc,IAFxC,sBAUAC,EAAmB,WACvB,MAAqCC,YAAY,CAC/CC,WAAY,iBAAM,CAAC,IAAIC,IAAwB,MAC/CC,QACE,wEACFC,cAAeC,MAJT3B,EAAR,EAAQA,QAASf,EAAjB,EAAiBA,MAAO2C,EAAxB,EAAwBA,SAOxB,OACE,cAAC,IAAD,UACE,eAAC,IAAD,CACE5B,QAASA,EACT6B,WAAS,EACTD,SAAUA,EACVE,eAAgB7C,EAChB8C,WAAW,MALb,UAOE,cAAC,EAAD,IAPF,OASE,cAAC,EAAD,IATF,OAWE,cAAC,EAAD,UAaOC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCrISC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d45115d1.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./App.css\";\nimport \"remirror/styles/all.css\";\nimport { EditorState, htmlToProsemirrorNode, ProsemirrorNode } from \"remirror\";\nimport { NodeFormattingExtension } from \"remirror/extensions\";\nimport {\n  Remirror,\n  ThemeProvider,\n  useCommands,\n  useEditorState,\n  useRemirror,\n  useRemirrorContext,\n} from \"@remirror/react\";\n\nfunction gatherNodes(\n  state: EditorState,\n  included: string[]\n): ProsemirrorNode[] {\n  const gatheredNodes: ProsemirrorNode[] = [];\n\n  // Gather the nodes to indent.\n  state.doc.nodesBetween(state.selection.from, state.selection.to, (node) => {\n    if (included.includes(node.type.name)) {\n      gatheredNodes.push(node);\n    }\n  });\n\n  return gatheredNodes;\n}\n\nconst AlignButtons = () => {\n  const commands = useCommands();\n  const state = useEditorState();\n  const { manager } = useRemirrorContext();\n\n  const gatheredNodes = gatherNodes(\n    state,\n    manager.store.nodeTags.formattingNode\n  );\n  const node = gatheredNodes[gatheredNodes.length - 1];\n\n  return (\n    <>\n      <button\n        onMouseDown={(event) => event.preventDefault()}\n        onClick={() => commands.leftAlign()}\n        style={{\n          fontWeight:\n            node?.attrs.nodeTextAlignment === \"left\" ? \"bold\" : \"normal\",\n        }}\n      >\n        Left\n      </button>\n      <button\n        onMouseDown={(event) => event.preventDefault()}\n        onClick={() => commands.centerAlign()}\n        style={{\n          fontWeight:\n            node?.attrs.nodeTextAlignment === \"center\" ? \"bold\" : \"normal\",\n        }}\n      >\n        Center\n      </button>\n      <button\n        onMouseDown={(event) => event.preventDefault()}\n        onClick={() => commands.rightAlign()}\n        style={{\n          fontWeight:\n            node?.attrs.nodeTextAlignment === \"right\" ? \"bold\" : \"normal\",\n        }}\n      >\n        Right\n      </button>\n    </>\n  );\n};\n\nconst IndentButtons = () => {\n  const commands = useCommands();\n  return (\n    <>\n      <button\n        onMouseDown={(event) => event.preventDefault()}\n        onClick={() => commands.decreaseIndent()}\n      >\n        &lt;&lt;\n      </button>\n      <button\n        onMouseDown={(event) => event.preventDefault()}\n        onClick={() => commands.increaseIndent()}\n      >\n        &gt;&gt;\n      </button>\n    </>\n  );\n};\n\nconst LineHeightButtons = () => {\n  const commands = useCommands();\n  return (\n    <>\n      <button\n        onMouseDown={(event) => event.preventDefault()}\n        onClick={() => commands.setLineHeight(1)}\n      >\n        Narrow\n      </button>\n      <button\n        onMouseDown={(event) => event.preventDefault()}\n        onClick={() => commands.setLineHeight(2)}\n      >\n        Wide\n      </button>\n    </>\n  );\n};\n\nconst Editor: React.FC = () => {\n  const { manager, state, onChange } = useRemirror({\n    extensions: () => [new NodeFormattingExtension({})],\n    content:\n      \"<p>Click buttons to change alignment, indent,<br> and line height</p>\",\n    stringHandler: htmlToProsemirrorNode,\n  });\n\n  return (\n    <ThemeProvider>\n      <Remirror\n        manager={manager}\n        autoFocus\n        onChange={onChange}\n        initialContent={state}\n        autoRender=\"end\"\n      >\n        <AlignButtons />\n        &nbsp;\n        <IndentButtons />\n        &nbsp;\n        <LineHeightButtons />\n      </Remirror>\n    </ThemeProvider>\n  );\n};\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Editor />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}